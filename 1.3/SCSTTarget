#!/bin/bash
#
#
# 	SCSTTarget OCF RA. Exports and manages iSCSI SCST targets.
#
#   (c) 2012-2013 Riccardo Bicelli
#                 and Linux-HA contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Set portal to none by default
OCF_RESKEY_portals_default="none"
: ${OCF_RESKEY_portals=${OCF_RESKEY_portals_default}}

# Target ID
OCF_RESKEY_target_id_default=0
: ${OCF_RESKEY_target_id=${OCF_RESKEY_target_id_default}}

# SRPT: Disable per_port
OCF_RESKEY_srpt_disable_per_port_default=false
: ${OCF_RESKEY_srpt_disable_per_port=${OCF_RESKEY_srpt_disable_per_port_default}}

# SRPT: Port List
OCF_RESKEY_srpt_target_ports_default="all"
: ${OCF_RESKEY_srpt_target_ports=${OCF_RESKEY_srpt_target_ports_default}}

# Debug Enable
OCF_RESKEY_debug_enable_default=false
: ${OCF_RESKEY_debug_enable=${OCF_RESKEY_debug_enable_default}}

# iscsi Enable
OCF_RESKEY_srpt_enable_default=false
: ${OCF_RESKEY_srpt_enable=${OCF_RESKEY_srpt_enable_default}}

# srpt Enable
OCF_RESKEY_iscsi_enable_default=false
: ${OCF_RESKEY_iscsi_enable=${OCF_RESKEY_iscsi_enable_default}}


# Lockfile, used for selecting a target ID
LOCKFILE=${HA_RSCTMP}/SCSTTarget.lock
TARGETSFILE=${HA_RSCTMP}/SCSTTarget.tgts
ocf_release_lock_on_exit $LOCKFILE


ISCSI_DAEMON="/usr/local/sbin/iscsi-scstd"

SCST_BASE="/sys/kernel/scst_tgt"
ISCSI_BASE="${SCST_BASE}/targets/iscsi"
TARGET_BASE="${SCST_BASE}/targets"
SRPT_TARGET="${TARGET_BASE}/ib_srpt/"
#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SCSTTarget" version="1.3">
<version>1.2.9</version>

<longdesc lang="en">
Manages SCST SCSI targets.
A SCSI target is a collection of SCSI Logical Units (LUs) 
exported via a daemon that speaks the iSCSI protocol or
directly on Infiniband HCA.
</longdesc>
<shortdesc lang="en">SCST target export agent</shortdesc>

<parameters>

<parameter name="iscsi_enable" required="0" unique="0">
<longdesc lang="en">
Enables iSCSI support.
Default is disabled.
</longdesc>
<shortdesc lang="en">Enable iSCSI</shortdesc>
<content type="boolean" default="false"/>
</parameter>

<parameter name="iqn" required="1" unique="0">
<longdesc lang="en">
The target iSCSI Qualified Name (IQN). Should follow the conventional
"iqn.yyyy-mm.&lt;reversed domain name&gt;[:identifier]" syntax.
</longdesc>
<shortdesc lang="en">iSCSI target IQN</shortdesc>
<content type="string" />
</parameter>

<parameter name="target_id" required="0" unique="1">
<longdesc lang="en">
The rel_target_id for Target. Default is set automatically.
This is mandatory for ALUA  settings.
For this implementation iSCSI Target IDs are calculated in
1000+target_id.
</longdesc>
<shortdesc lang="en">Target ID</shortdesc>
<content type="integer" />
</parameter>

<parameter name="portals" required="0" unique="0">
<longdesc lang="en">
iSCSI network portal addresses. Not supported by all
implementations. If unset, the default is to create one portal that
listens on all IP addresses.
</longdesc>
<shortdesc lang="en">iSCSI portal addresses</shortdesc>
<content type="string" default="${OCF_RESKEY_portals_default}"/>
</parameter>

<parameter name="allowed_initiators" required="0" unique="0">
<longdesc lang="en">
TODO: Allowed iSCSI initiators. A space-separated list of initiators allowed to
connect to this target. Initiators may be listed in any syntax
the target implementation allows. If this parameter is empty or
not set, access to this target will be allowed from any initiator.
</longdesc>
<shortdesc lang="en">TODO: List of iSCSI initiators allowed to connect
to this target</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="incoming_username" required="0" unique="0">
<longdesc lang="en">
A username used for incoming initiator authentication. If unspecified,
allowed initiators will be able to log in without authentication.
</longdesc>
<shortdesc lang="en">Incoming account username</shortdesc>
<content type="string"/>
</parameter>

<parameter name="incoming_password" required="0" unique="0">
<longdesc lang="en">
A password used for incoming initiator authentication.
</longdesc>
<shortdesc lang="en">Incoming account password</shortdesc>
<content type="string"/>
</parameter>

<parameter name="additional_parameters" required="0" unique="0">
<longdesc lang="en">
Additional target parameters. A space-separated list of "name=value"
pairs which will be passed through to the iSCSI daemon's management
interface. The supported parameters are implementation
dependent. Neither the name nor the value may contain whitespace.
</longdesc>
<shortdesc lang="en">List of iSCSI target parameters</shortdesc>
<content type="string" />
</parameter>

<parameter name="srpt_enable" required="0" unique="0">
<longdesc lang="en">
Enables Infiniband support.
Default is disabled.
</longdesc>
<shortdesc lang="en">Enable Infiniband</shortdesc>
<content type="boolean" default="false"/>
</parameter>

<parameter name="srpt_target_ports" required="0" unique="0">
<longdesc lang="en">
Space-separated list of SRPT HCA ports allowed to have the target
enabled on.
Default is enabled to all ports.</longdesc>
<shortdesc lang="en">SRPT HCA ports allowed</shortdesc>
<content type="string" default="${OCF_RESKEY_srpt_target_ports_default}"/>
</parameter>

<parameter name="srpt_disable_per_port" required="0" unique="0">
<longdesc lang="en">
Disables SRPT per-port mode.
Default is enabled.</longdesc>
<shortdesc lang="en">Disables SRPT per-port mode</shortdesc>
<content type="boolean" default="false"/>
</parameter>

<parameter name="debug_enable" required="0" unique="0">
<longdesc lang="en">
Enables Debug.
Default is disabled.
Writes debug Messages to /tmp/scsttarget.log, scst configuration
in /tmp/scst/scst.conf.start and /tmp/scst.conf.stop
</longdesc>
<shortdesc lang="en">Enable Debug</shortdesc>
<content type="boolean" default="false"/>
</parameter>

</parameters>

<actions>
<action name="start"        timeout="10" />
<action name="stop"         timeout="180" />
<action name="status "      timeout="10" interval="10" depth="0" />
<action name="monitor"      timeout="10" interval="10" depth="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="10" />
</actions>
</resource-agent>
END
}

l_debug () {
	# Instead of using the ocf_log function, write to a file
	if ${OCF_RESKEY_debug_enable} ; then	
		echo $1 >> /tmp/scsttarget.log
	fi
	ocf_log debug $1
}

l_set_target_lock() {
	# $1: string, used to set target type (srpt,fc ...)	
	# $2: string, must be 1 or -1, used for incrementing or decrementing
	# Return true if is the last target
	l_debug "Setting target lock $1:$2"
	local tgts="0"
	local ret=0
	local tgfile="${TARGETSFILE}.${1}"
	
	if [ -e ${tgfile} ]; then
		tgts=$( cat ${tgfile} )
	fi
	#If number of tgts is still 0 we have to start modules

	if [ "$tgts" = "0" ]; then
		tgts="1"
		ret=2
	else
			
		tgts=$( expr "${tgts}" + "${2}" )
		if [ "${tgts}" = "0"  ]; then
			#Targets Count is 0		
			ret=0
		else
			#Targets are still alive			
			ret=1
		fi	
	fi	
	echo ${tgts} > ${tgfile}
	return $ret
	
}

l_release_target_lock() {
	rm ${TARGETSFILE}.${1} > /dev/null 2>&1
}

l_exit () {
	ocf_log err $1	
	exit $OCF_ERROR_GENERIC
}

l_find_srpt_target_name () {
	l_debug "Scanning ${TARGET_BASE}/ib_srpt"
	local RET=1 	
	SRPT_TARGET_NAME=""	
	for i in $( ls "${TARGET_BASE}/ib_srpt" ) ; do
		l_debug "Entering ${TARGET_BASE}/ib_srpt/${i}"
		if [ -e "${TARGET_BASE}/ib_srpt/${i}/enabled" ]; then
			l_debug "Found SRPT Target Name: ${i}"
			if ! ${OCF_RESKEY_srpt_disable_per_port}; then
	                	# Cycle Through allowed targets
				for l in ${OCF_RESKEY_srpt_target_ports} ; do
					if [ "${OCF_RESKEY_srpt_target_ports}" = "all" ] || [ "${l}" = "${i}" ]; then
							SRPT_TARGET_NAME="${SRPT_TARGET_NAME} ${i}"
							RET=0
					fi
				done
			else
				#Single target				
				SRPT_TARGET_NAME="${i}"
				return 0;
			fi
		fi
        done
	
	return $RET
}

l_load_module () {
	# $1: module name
	# $2: module parameter 1
	# $3: module parameter 2
	n=`lsmod | grep -c "^$1 "`
	if [ $n -gt 0 ];
	then
		return 0
	else
		modprobe $1 $2 $3> /dev/null 2>&1 || return 1
		return 0
	fi
}


l_start_service () {
				
		case $1 in
		
		scst)
			# Load SCST
			if [ ! -d ${SCST_BASE} ]; then
				ocf_log info "Loading scst Modules"
				l_load_module scst || return 1

				#Not critical modules, not unloaded on stop.		
				l_load_module crc32c				
				l_load_module crc32c_intel
			fi
		;;

		srpt)
			#Load Infiniband
			if ${OCF_RESKEY_srpt_enable}; then
				l_debug "Loading Infiniband Module"				
				if ! ${OCF_RESKEY_srpt_disable_per_port}; then
					l_load_module ib_srpt use_port_guid_in_session_name=1 one_target_per_port=1
				else
					l_load_module ib_srpt
				fi
				l_find_srpt_target_name				
			fi
		;;
		
		iscsi)		
			#Load iSCSI modules and services		
			if ${OCF_RESKEY_iscsi_enable}; then		
				if [ ! "$(pidof ${ISCSI_DAEMON})" ]; then
					l_load_module iscsi_scst || return 1			
					ocf_run $ISCSI_DAEMON || return 1
					# Test if it fits :)					
					# ocf_run scstadmin -force -noprompt -clear_config >/dev/null 2>&1
				fi
			fi
		;;
		
		esac
		return 0
}

l_stop_iscsi () {
	#Stop iSCSI SCST Services, if there are no targets active.
	local ISCSI_TARGET_NOT_PRESENT=true

	#iSCSI: Are there other targets active?
	for i in $( ls "${ISCSI_BASE}" ) ; do
	if [ -d "${ISCSI_BASE}/${i}" ]; then
		ocf_log warn "Found target running: ${i}"
		ISCSI_TARGET_NOT_PRESENT=false
	fi
	done
	
	#iSCSI: Close sessions, not really needed
	if [ -e ${ISCSI_BASE}/${OCF_RESKEY_iqn} ]; then	
		for i in `/bin/ls ${ISCSI_BASE}/${OCF_RESKEY_iqn}/sessions`; do
			ocf_log warn "Force closing session to initiator ${i}"
			echo "1" > "${ISCSI_BASE}/${OCF_RESKEY_iqn}/sessions/${i}/force_close"
	    	done
	fi

	#Stop process and unload modules
	if $ISCSI_TARGET_NOT_PRESENT ; then
		l_debug "Unloading iSCSI"			
		ocf_log warn "iSCSI Daemon not required, stopping ..."		
		pkill -TERM -f $ISCSI_DAEMON	
		rmmod iscsi_scst	
	fi
}

SCSTTarget_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

SCSTTarget_start() {
    SCSTTarget_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi

    local param
    local name
    local value
    local initiator
    local rel_target_id
    local t="0"
		
		ocf_take_lock $LOCKFILE
		
		# Start SCST
		l_start_service scst

		# iSCSI		
		if ${OCF_RESKEY_iscsi_enable}; then
		
			# Start iSCSI			
			l_start_service iscsi || l_exit "Unable to start iSCSI Daemon or Services!"			
			
			# Set incoming username and password globally
			if [ "${OCF_RESKEY_incoming_username}" != "" ]; then
				echo "add_attribute IncomingUser ${OCF_RESKEY_incoming_username} ${OCF_RESKEY_incoming_password}" > ${ISCSI_BASE}/mgmt
				if [ $? -ne 0 ]; then
					ocf_log warn "Unable to set CHAP Authentication!"
				fi
			fi
		
			ocf_log info "iSCSI target ${OCF_RESKEY_iqn}: Starting..."

			# Create iSCSI Target
			echo "add_target ${OCF_RESKEY_iqn}" > ${ISCSI_BASE}/mgmt || exit $OCF_ERR_GENERIC
			
			# Set rel_tgt_id
			if [ "${OCF_RESKEY_target_id}" != "0" ]; then
				rel_target_id=$( expr 1000 + ${OCF_RESKEY_target_id} )
				echo "${rel_target_id}" > ${ISCSI_BASE}/${OCF_RESKEY_iqn}/rel_tgt_id  || ocf_log warn "Unable to set iSCSI Target ID."
			fi			
			
			# Set Allowed Portals
			if [ "${OCF_RESKEY_portals}" != "none" ]; then				
				for param in ${OCF_RESKEY_portals}; do
				ocf_log info "Adding allowed portal ${param} to target ${OCF_RESKEY_iqn}"			
				echo "add_target_attribute ${OCF_RESKEY_iqn} allowed_portal ${param}" > ${ISCSI_BASE}/mgmt
				if [ $? -ne 0 ]; then
					ocf_log warn "Unable to set Allowed Portal!"
				fi
		  		done			
			fi

			# Set incoming username and password
			if [ "${OCF_RESKEY_incoming_username}" != "" ]; then
				ocf_log info "Setting CHAP Authentication on target ${OCF_RESKEY_iqn}"				
				echo "add_target_attribute ${OCF_RESKEY_iqn} IncomingUser ${OCF_RESKEY_incoming_username} ${OCF_RESKEY_incoming_password}" > ${ISCSI_BASE}/mgmt			
				if [ $? -ne 0 ]; then
					ocf_log warn "Unable to set CHAP Authentication!"
				fi			
			fi
		
			
			# Enable iSCSI Driver
			echo 1 > "${ISCSI_BASE}/enabled" || exit $OCF_ERR_GENERIC
			
			#Enable target
			echo 1 > "${ISCSI_BASE}/${OCF_RESKEY_iqn}/enabled" || exit $OCF_ERR_GENERIC
	
			ocf_log info "iSCSI target ${OCF_RESKEY_iqn}: Started."

			l_debug "iSCSI target ${OCF_RESKEY_iqn}: Started."
		
		fi

		# Infiniband
		t=0
		if ${OCF_RESKEY_srpt_enable}; then			
			l_set_target_lock "srpt" "1"			
			if [ $? -eq 2 ]; then			
				l_start_service srpt			
			fi
			
			for i in ${SRPT_TARGET_NAME}; do
				t=$( expr "${t}" + "1" )				
				l_debug "Enable Target ${i}"			
				echo 1 > "${SRPT_TARGET}/${i}/enabled" || exit $OCF_ERR_GENERIC
				echo $( expr "2000" + "${t}" ) > "${SRPT_TARGET}/${i}/rel_tgt_id" || ocf_log warn "Unable to set SRPT Target ID."
			done
			
			l_debug "Infiniband: Started."
					
		fi

		#Debugging purpose
		if ${OCF_RESKEY_debug_enable}; then		
			scstadmin -write_config /tmp/scst.conf.start
		fi
    return $OCF_SUCCESS
}

SCSTTarget_stop() {
    SCSTTarget_monitor
   	
   if [ $? =  $OCF_SUCCESS ]; then
	ocf_take_lock $LOCKFILE	
	
	local param
	local srpt_stop=false
	local scst_stop=0
	local scst_stop_quorum=0
		
	# iSCSI	
	if ${OCF_RESKEY_iscsi_enable} ; then	
		scst_stop_quorum=$( expr "${scst_stop_quorum}" + "1" )

		ocf_log info "iSCSI target ${OCF_RESKEY_iqn}: Stopping..."
	
		# Check if there are connected luns
	    	for i in $( ls "${ISCSI_BASE}/${OCF_RESKEY_iqn}/luns" ) ; do
	    		if [ -d "${ISCSI_BASE}/${OCF_RESKEY_iqn}/luns/${i}" ]; then
			ocf_log err "Unable to stop target ${OCF_RESKEY_iqn}: lun ${i} connected!"
			exit $OCF_ERR_GENERIC
	    		fi
	    	done			
	
		# iSCSI: Disable Target
		ocf_log info "disabling iSCSI target ${OCF_RESKEY_iqn}"
		echo 0 > ${ISCSI_BASE}/${OCF_RESKEY_iqn}/enabled || exit $OCF_ERR_GENERIC
		
		# iSCSI: Remove Target
		ocf_log info "deleting iSCSI target ${OCF_RESKEY_iqn}"
		echo "del_target ${OCF_RESKEY_iqn}" > ${ISCSI_BASE}/mgmt
		if [ $? -ne 0 ]; then
			ocf_log err "Unable to delete iSCSI target ${OCF_RESKEY_iqn}"
			exit $OCF_ERR_GENERIC
		fi
		
		ocf_log info "iSCSI target ${OCF_RESKEY_iqn}: Stopped."
		
		# iSCSI: Stop Daemon and Modules
		l_stop_iscsi

		scst_stop=$( expr "${scst_stop}" + "1" )
	fi
	
	# Infiniband: Stop only if target has no LUNs
	# TODO: Stop infiniband only if there are no other targets active
	if ${OCF_RESKEY_srpt_enable} ; then
		
		scst_stop_quorum=$( expr "${scst_stop_quorum}" + "1" )
		# Check if there are connected luns
		srpt_stop=true
    		for i in $( ls "${SRPT_TARGET}" ) ; do    			
			for l in ${SRPT_TARGET_NAME}; do
				if [ -d "${SRPT_TARGET}/${i}/luns/${l}" ]; then
					ocf_log warn "Unable to stop Infiniband target ${i}: lun ${l} connected!"
					srpt_stop=false
				fi
			done			
				
    		done		
		
		if ${srpt_stop} ; then
			# Take care of lock			
			for i in ${SRPT_TARGET_NAME}; do
				l_debug "Disable Target ${i}"
				echo 0 > "${SRPT_TARGET}/${i}/enabled" || exit $OCF_ERR_GENERIC			
			done									
			
			l_set_target_lock "srpt" "-1"
			if [ $? -eq 0 ]; then			
				l_debug "Unload ib_srpt ..."			
				rmmod ib_srpt
				scst_stop=$( expr "${scst_stop}" + "1" )
				l_release_target_lock "srpt"						
			fi
			
		fi		
	fi	
	
	# Stop SCST
	if [ "${scst_stop_quorum}" = "${scst_stop}" ]; then
		l_debug "Unloading SCST Module"
		rmmod scst
	fi

	# Debugging purpose
	if ${OCF_RESKEY_debug_enable}; then	
		scstadmin -write_config /tmp/scst.conf.stop
	fi
	
    fi
    	
    return $OCF_SUCCESS
}

SCSTTarget_monitor() {
	
	# iSCSI	
	if ${OCF_RESKEY_iscsi_enable}; then	
		if [ -d "${ISCSI_BASE}/${OCF_RESKEY_iqn}" ]; then	 
			return $OCF_SUCCESS
		else    	
			return $OCF_NOT_RUNNING
		fi
	fi
	
	# Infiniband
	if [ "${OCF_RESKEY_srpt_enable}" == "1" ]; then
		l_find_srpt_target_name	|| return $OCF_NOT_RUNNING
	fi
	
	return $OCF_SUCCESS
}

SCSTTarget_validate() {
	# Do we have all required variables?
	local required_vars	
    
    
   if ${OCF_RESKEY_iscsi_enable} ; then			
	    required_vars="iqn"
	    for var in ${required_vars}; do
		param="OCF_RESKEY_${var}"
		if [ -z "${!param}" ]; then
		    ocf_log error "Missing resource parameter \"$var\"!"
		    exit $OCF_ERR_CONFIGURED
		fi
	    done
    fi	
    
    #if ${OCF_RESKEY_srpt_enable} ; then
    #	# Validate infiniband parameters
    #fi

    if ! ocf_is_probe; then
		check_binary scstadmin
    fi    

    return $OCF_SUCCESS
}


case $1 in
  meta-data)
	meta_data
	exit $OCF_SUCCESS
	;;
  usage|help)
	SCSTTarget_usage
	exit $OCF_SUCCESS
	;;
esac

# Everything except usage and meta-data must pass the validate test
SCSTTarget_validate

case $__OCF_ACTION in
start)		SCSTTarget_start;;
stop)		SCSTTarget_stop;;
monitor|status)	SCSTTarget_monitor;;
#reload)		ocf_log err "Reloading..."
#	        SCSTTarget_start
#		;;
validate-all)	;;
*)		SCSTTarget_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
